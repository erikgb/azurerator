package redirecturi

import (
	"context"

	"github.com/asaskevich/govalidator"
	v1 "github.com/nais/liberator/pkg/apis/nais.io/v1"
	msgraph "github.com/nais/msgraph.go/v1.0"

	"github.com/nais/azureator/pkg/azure"
	"github.com/nais/azureator/pkg/azure/transaction"
	stringutils "github.com/nais/azureator/pkg/util/strings"
)

// Workaround to include empty array of RedirectUris in JSON serialization.
// The autogenerated library code uses 'omitempty' for RedirectUris, which when empty
// leaves the list of redirect URIs unchanged and non-empty and is thus considered unmodified in the PATCH operation.
type emptiableRedirectUris struct {
	RedirectUris []string `json:"redirectUris"`
}

type RedirectUri interface {
	Update(tx transaction.Transaction) error
}

type redirectUri struct {
	Application
}

type Application interface {
	Patch(ctx context.Context, id azure.ObjectId, application interface{}) error
}

func NewRedirectUri(application Application) RedirectUri {
	return redirectUri{Application: application}
}

func (r redirectUri) Update(tx transaction.Transaction) error {
	objectId := tx.Instance.GetObjectId()
	app := App(tx.Instance)

	return r.Application.Patch(tx.Ctx, objectId, app)
}

func App(instance v1.AzureAdApplication) interface{} {
	redirectUris := ReplyUrlsToStringSlice(instance)

	if instance.Spec.SinglePageApplication != nil && *instance.Spec.SinglePageApplication {
		return singlePageApp(redirectUris)
	}
	return webApp(redirectUris)
}

func ReplyUrlsToStringSlice(resource v1.AzureAdApplication) []string {
	replyUrls := make([]string, 0)
	for _, v := range resource.Spec.ReplyUrls {
		ok := govalidator.IsURL(v.Url)
		if ok {
			replyUrls = append(replyUrls, v.Url)
		}
	}
	return stringutils.RemoveDuplicates(replyUrls)
}

func webApp(redirectUris []string) interface{} {
	return &struct {
		msgraph.DirectoryObject
		Web emptiableRedirectUris `json:"web"`
		Spa emptiableRedirectUris `json:"spa"`
	}{
		Web: emptiableRedirectUris{
			RedirectUris: redirectUris,
		},
		Spa: emptiableRedirectUris{
			RedirectUris: make([]string, 0),
		},
	}
}

func singlePageApp(redirectUris []string) interface{} {
	return &struct {
		msgraph.DirectoryObject
		Web emptiableRedirectUris `json:"web"`
		Spa emptiableRedirectUris `json:"spa"`
	}{
		Web: emptiableRedirectUris{
			RedirectUris: make([]string, 0),
		},
		Spa: emptiableRedirectUris{
			RedirectUris: redirectUris,
		},
	}
}
